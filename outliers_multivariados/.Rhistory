geom_boxplot() +
# geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",fill="white", dotsize=0.8) +
plot_layout(ncol=2)
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot()
#usando pacotes para plot:
library(ggplot2); library(cowplot); library(patchwork)
ggplot(swiss, aes(y=Examination, x="Examination")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge", fill="white", dotsize=0.8) +
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",fill="white", dotsize=0.8) +
plot_layout(ncol=2)
library(MVA)
bvbox(swiss[,c(3,4)], xlab = colnames(swiss)[3], ylab = colnames(swiss)[4], pch="")
bvbox(swiss[,c(3,4)], xlab = colnames(swiss)[3], ylab = colnames(swiss)[4])
#usando pacotes para plot:
library(ggplot2); library(cowplot); library(patchwork)
ggplot(swiss, aes(y=Examination, x="Examination")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge", fill="white", dotsize=0.8) +
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",fill="white", dotsize=0.8) +
plot_layout(ncol=2)
out <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
swiss$out <- mutate(swiss, outlier = ifelse(is_outlier(swiss[,3:4]), swiss[,3:4], as.numeric(NA)))
swiss$out <- mutate(swiss, outlier = ifelse(out(swiss[,3:4]), swiss[,3:4], as.numeric(NA)))
swiss %>% mutate( outlier = ifelse(out(swiss[,3:4]), swiss[,3:4], as.numeric(NA)))
out(swiss[,4])
rownames(swiss[out(swiss[,4]),])
swiss[out(swiss[,4]),4]
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",fill="white", dotsize=0.8) +
annotate("text", x=1, y=swiss[out(swiss[,4]),4], label= rownames(swiss[out(swiss[,4]),]))
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",fill="white", dotsize=0.8) +
annotate("text", x=1.2, y=swiss[out(swiss[,4]),4], label= rownames(swiss[out(swiss[,4]),]))
ggplot(swiss, aes(y=Examination, x="Examination")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge", fill="white", dotsize=0.8) +
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",fill="white", dotsize=0.8) +
annotate("text", x=c(1.1,1.1,0.7,1.1,0.2), y=swiss[out(swiss[,4]),4], label= rownames(swiss[out(swiss[,4]),]))
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",fill="white", dotsize=0.8) +
annotate("text", x=c(1.1,1.1,0.7,1.1,0.2), y=swiss[out(swiss[,4]),4], label= rownames(swiss[out(swiss[,4]),]))
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",fill="white", dotsize=0.8) +
annotate("text", x=c(1.1,1.1,0.7,1.1,0.6), y=swiss[out(swiss[,4]),4], label= rownames(swiss[out(swiss[,4]),]))
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",fill="white", dotsize=0.8) +
annotate("text", x=c(1.1,1.1,0.8,1.1,1.1), y=swiss[out(swiss[,4]),4], label= rownames(swiss[out(swiss[,4]),]))
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",fill="white", dotsize=0.8) +
annotate("text", x=c(1.1,1.1,0.8,1.1,0.7), y=swiss[out(swiss[,4]),4], label= rownames(swiss[out(swiss[,4]),]))
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",fill="white", dotsize=0.8) +
annotate("text", x=c(1.1,1.1,1.1,1.1,0.9), y=swiss[out(swiss[,4]),4], label= rownames(swiss[out(swiss[,4]),]))
ggplot(swiss, aes(y=Examination, x="Examination")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",
fill="white", dotsize=0.8) +
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",
fill="white", dotsize=0.8) +
annotate("text", x=c(1.1,1.1,1.1,1.1,0.9),
y=swiss[out(swiss[,4]),4],
label= rownames(swiss[out(swiss[,4]),])) +
plot_layout(ncol=2)
ggplot(swiss, aes(y=Examination, x="Examination")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",
fill="white", dotsize=0.8) +
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",
fill="white", dotsize=0.8) +
annotate("text", x=c(1.2,1.2,1.2,1.2,0.8),
y=swiss[out(swiss[,4]),4],
label= rownames(swiss[out(swiss[,4]),])) +
plot_layout(ncol=2)
library(MVA)
bvbox(swiss[,c(3,4)], xlab = colnames(swiss)[3], ylab = colnames(swiss)[4])
text(swiss[out(swiss[,4]),3], swiss[out(swiss[,4]),4], rownames(swiss[out(swiss[,4]),4]))
swiss[out(swiss[,4]),3]
swiss[out(swiss[,4]),4]
bvbox(swiss[,c(3,4)], xlab = colnames(swiss)[3], ylab = colnames(swiss)[4])
rownames(swiss[out(swiss[,4]),4])
out(swiss[,4]),4]
out(swiss[,4]),4])
library(MVA)
bvbox(swiss[,c(3,4)], xlab = colnames(swiss)[3], ylab = colnames(swiss)[4])
text(swiss[out(swiss[,4]),3], swiss[out(swiss[,4]),4], rownames(swiss[out(swiss[,4]),]))
library(MVA)
bvbox(swiss[,c(3,4)], xlab = colnames(swiss)[3], ylab = colnames(swiss)[4])
text(x=swiss[out(swiss[,4]),3], y=swiss[out(swiss[,4]),4]-1, rownames(swiss[out(swiss[,4]),]))
library(MVA)
bvbox(swiss[,c(3,4)], xlab = colnames(swiss)[3], ylab = colnames(swiss)[4])
text(x=swiss[out(swiss[,4]),3], y=swiss[out(swiss[,4]),4]-2, rownames(swiss[out(swiss[,4]),]))
library(MVA)
bvbox(swiss[,c(3,4)], xlab = colnames(swiss)[3], ylab = colnames(swiss)[4])
text(x=swiss[out(swiss[,4]),3], y=swiss[out(swiss[,4]),4]-2.5, rownames(swiss[out(swiss[,4]),]))
maha <- mahalanobis(swiss[,3:4], center = colMeans(swiss[,3:4]), cov = cov(swiss[,3:4]))
maha
# é preciso explicitar o centro da distribuição e a matriz de covariância:
maha <- mahalanobis(swiss[,3:4], center = colMeans(swiss[,3:4]), cov = cov(swiss[,3:4]))
plot(1:length(maha2), maha2)
abline(h=qchisq(0.05, 2, lower.tail = F), lty=2)
out <- maha2[maha2>qchisq(0.05, 2, lower.tail = F)]
text(c(42,46,47)-7, out, names(out))
#install_github("melina-leite/rmdformats")
library(knitr)
library(skimr)
library(ggplot2); library(cowplot); library(patchwork)
library(tidyverse)
opts_chunk$set(
fig.align = "center", fig.show = "hold", fig.height = 4,
warning = F, message = F, error = F, cache = T
)
options(formatR.arrow = TRUE, width = 90)
# é preciso explicitar o centro da distribuição e a matriz de covariância:
maha <- mahalanobis(swiss[,3:4], center = colMeans(swiss[,3:4]), cov = cov(swiss[,3:4]))
quant <- qchisq(0.05, 2, lower.tail = F)
plot(1:length(maha), maha2)
abline(h=, lty=2)
out <- maha[maha>quant)]
out <- maha[maha>quant]
# é preciso explicitar o centro da distribuição e a matriz de covariância:
maha <- mahalanobis(swiss[,3:4], center = colMeans(swiss[,3:4]), cov = cov(swiss[,3:4]))
quant <- qchisq(0.05, 2, lower.tail = F)
plot(1:length(maha), maha2)
abline(h=, lty=2)
out <- maha[maha>quant]
text(c(42,46,47)-7, out, names(out))
# é preciso explicitar o centro da distribuição e a matriz de covariância:
maha <- mahalanobis(swiss[,3:4], center = colMeans(swiss[,3:4]), cov = cov(swiss[,3:4]))
quant <- qchisq(0.05, 2, lower.tail = F)
plot(1:length(maha), maha2)
abline(h=quant, lty=2)
out <- maha[maha>quant]
text(c(42,46,47)-7, out, names(out))
swiss
#install_github("melina-leite/rmdformats")
library(knitr)
library(skimr)
library(ggplot2); library(cowplot); library(patchwork)
library(tidyverse)
opts_chunk$set(
fig.align = "center", fig.show = "hold",
warning = F, message = F, error = F, cache = T
)
options(formatR.arrow = TRUE, width = 90)
library(MVA)
bvbox(swiss[,c(3,4)], xlab = colnames(swiss)[3], ylab = colnames(swiss)[4])
text(x=swiss[out(swiss[,4]),3], y=swiss[out(swiss[,4]),4]-2.5, rownames(swiss[out(swiss[,4]),]))
#install_github("melina-leite/rmdformats")
library(knitr)
library(skimr)
library(ggplot2); library(cowplot); library(patchwork)
library(tidyverse)
opts_chunk$set(
fig.align = "center", fig.show = "hold",
warning = F, message = F, error = F, cache = T
)
options(formatR.arrow = TRUE, width = 90)
#usando pacotes para plot:
library(ggplot2); library(cowplot); library(patchwork)
#função que determina as observações outiers para serem nomeadas no plot
out <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
ggplot(swiss, aes(y=Examination, x="Examination")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",
fill="white", dotsize=0.8) +
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",
fill="white", dotsize=0.8) +
annotate("text", x=c(1.2,1.2,1.2,1.2,0.8),
y=swiss[out(swiss[,4]),4],
label= rownames(swiss[out(swiss[,4]),])) +
plot_layout(ncol=2)
library(MVA)
bvbox(swiss[,c(3,4)], xlab = colnames(swiss)[3], ylab = colnames(swiss)[4])
text(x=swiss[out(swiss[,4]),3], y=swiss[out(swiss[,4]),4]-2.5, rownames(swiss[out(swiss[,4]),]))
maha2 <- mahalanobis(swiss, center = colMeans(swiss), cov = cov(swiss))
#calculando o cˆ2 para delimitar o limiar
quant <- qchisq(0.05, 2, lower.tail = F)
# para calcular o cˆ2, lembre-se que os graus de liberdade são agora 6
quant <- qchisq(0.05, 6, lower.tail = F)
maha2 <- mahalanobis(swiss, center = colMeans(swiss), cov = cov(swiss))
# para calcular o cˆ2, lembre-se que os graus de liberdade são agora 6
quant2 <- qchisq(0.05, 6, lower.tail = F)
plot(1:length(maha2), maha2)
abline(h=quant2, lty=2)
out2 <- maha2[maha2>quant2]
text(c(42,46,47)-7, out, names(out2))
names(out2)
c(42,46,47)
swiss
maha2 <- mahalanobis(swiss, center = colMeans(swiss), cov = cov(swiss))
# para calcular o cˆ2, lembre-se que os graus de liberdade são agora 6
quant2 <- qchisq(0.05, 6, lower.tail = F)
plot(1:length(maha2), maha2)
abline(h=quant2, lty=2)
out2 <- maha2[maha2>quant2]
text(c(6,19,47)-7, out, names(out2))
maha2 <- mahalanobis(swiss, center = colMeans(swiss), cov = cov(swiss))
# para calcular o cˆ2, lembre-se que os graus de liberdade são agora 6
quant2 <- qchisq(0.05, 6, lower.tail = F)
plot(1:length(maha2), maha2)
abline(h=quant2, lty=2)
out2 <- maha2[maha2>quant2]
text(c(6,19,47)-7, out2, names(out2))
maha2 <- mahalanobis(swiss, center = colMeans(swiss), cov = cov(swiss))
# para calcular o cˆ2, lembre-se que os graus de liberdade são agora 6
quant2 <- qchisq(0.05, 6, lower.tail = F)
plot(1:length(maha2), maha2)
abline(h=quant2, lty=2)
out2 <- maha2[maha2>quant2]
text(c(6,19,47)-4, out2, names(out2))
maha <- mahalanobis(swiss[,3:4], # dados
center = colMeans(swiss[,3:4]), # médias das variáveis
cov = cov(swiss[,3:4])) # matriz de covariâncias
#calculando o cˆ2 para delimitar o limiar
quant <- qchisq(0.05, 2, lower.tail = F)
plot(1:length(maha), maha, xlab = "Observações", ylab= "Distância de Mahalanobis")
abline(h=quant, lty=2)
out <- maha[maha>quant]
text(c(42,46,47)-7, out, names(out))
maha2 <- mahalanobis(swiss, center = colMeans(swiss), cov = cov(swiss))
# para calcular o cˆ2, lembre-se que os graus de liberdade agora são 6
quant2 <- qchisq(0.05, 6, lower.tail = F)
plot(1:length(maha2), maha2, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant2, lty=2)
out2 <- maha2[maha2>quant2]
text(c(6,19,47)-4, out2, names(out2))
maha2 <- mahalanobis(swiss, center = colMeans(swiss), cov = cov(swiss))
# para calcular o cˆ2, lembre-se que os graus de liberdade agora são 6
quant2 <- qchisq(0.10, 6, lower.tail = F)
plot(1:length(maha2), maha2, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant2, lty=2)
out2 <- maha2[maha2>quant2]
text(c(6,19,47)-4, out2, names(out2))
maha2 <- mahalanobis(swiss, center = colMeans(swiss), cov = cov(swiss))
# para calcular o cˆ2, lembre-se que os graus de liberdade agora são 6
quant2 <- qchisq(0.05, 6, lower.tail = F)
plot(1:length(maha2), maha2, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant2, lty=2)
out2 <- maha2[maha2>quant2]
text(c(6,19,47)-4, out2, names(out2))
knitr::opts_chunk$set(comment = NA, message = FALSE, echo=F, cache=FALSE, warning=FALSE)
mvOutlier(da[1:12],qqplot = T)[1]
library(MVN)
install.packages("MVN")
library(MVN)
mvOutlier(swiss)
mvOutlier(swiss, alpha=1)
mvOutlier(swiss, alpha=0.95)
mvOutlier(swiss, alpha=0.90)
mvOutlier(swiss, alpha=0.90, method="quan")
mvOutlier(swiss, alpha=0.95, method="quan")
mvOutlier(swiss, alpha=0.90, method="quan")
quant2
mvOutlier(swiss, alpha=0.95, method="quan")
mvOutlier
covMCD(swiss)
covMcd(swiss)
robustbase::covMcd(swiss)
robustbase::covMcd(swiss)$cov
maha2 <- mahalanobis(swiss, center = colMeans(swiss), cov = robustbase::covMcd(swiss)$cov)
plot(1:length(maha2), maha2, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant2, lty=2)
plot(1:length(maha2), maha2, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant2, lty=2)
# para calcular o cˆ2, lembre-se que os graus de liberdade agora são 6
quant2 <- qchisq(0.95, 6)
plot(1:length(maha2), maha2, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant2, lty=2)
maha2 <- mahalanobis(swiss, center = covrob$center, cov = covrob$cov)
covrob <-  robustbase::covMcd(swiss)
maha2 <- mahalanobis(swiss, center = covrob$center, cov = covrob$cov)
plot(1:length(maha2), maha2, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant2, lty=2)
covrob <-  robustbase::covMcd(swiss, alpha=0.95)
maha2 <- mahalanobis(swiss, center = covrob$center, cov = covrob$cov)
plot(1:length(maha2), maha2, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant2, lty=2)
quant2
mvOutlier
plot(1:length(maha2), maha2, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant2, lty=2)
maha2 <- mahalanobis(swiss, center = colMeans(swiss), cov = cov(swiss))
# para calcular o cˆ2, lembre-se que os graus de liberdade agora são 6
quant2 <- qchisq(0.95, 6)
plot(1:length(maha2), maha2, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant2, lty=2)
out2 <- maha2[maha2>quant2]
text(c(6,19,47)-4, out2, names(out2))
mvOutlier(swiss, alpha=0.95, method="quan", qqplot=T)
mvOutlier(swiss, alpha=0.95, method="adj.quan", qqplot=T)
versicolor <- iris[51:100, 1:3]
# Mahalanobis distance
result <- mvOutlier(versicolor, qqplot = TRUE, method = "quan")
# Adjusted Mahalanobis distance
result <- mvOutlier(versicolor, qqplot = TRUE, method = "adj.quan")
# Adjusted Mahalanobis distance
result <- mvOutlier(versicolor, qqplot = TRUE, method = "adj.quan")
# Adjusted Mahalanobis distance
result <- mvOutlier(versicolor, method = "adj.quan")
# Mahalanobis distance
result <- mvOutlier(versicolor,method = "quan")
mvOutlier(swiss, alpha=0.95, method="quan", qqplot=T)
mvOutlier(swiss, alpha=0.95, method="quan")$plot
mvOutlier(versicolor,method = "quan")
outliers <- mvOutlier(swiss, alpha=0.95, method="quan")$plot
outliers <- mvOutlier(swiss, alpha=0.95, method="quan")
mvOutlier
#install_github("melina-leite/rmdformats")
library(knitr)
library(ggplot2); library(cowplot); library(patchwork)
opts_chunk$set(
fig.align = "center", fig.show = "hold",
warning = F, message = F, error = F, cache = T
)
options(formatR.arrow = TRUE, width = 90)
# carregando pacotes gráficos utilizados no roteiro
library(ggplot2) # faz os gráficos
library(cowplot) # deixa os gráficos mais bonitos
library(patchwork) # agrega +1 gráfico num mesmo plot
# para determinar as observações outiers a serem nomeadas no plot
# OBS: é o critério usado na construção dos boxplots
out <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
ggplot(swiss, aes(y=Examination, x="Examination")) +
geom_boxplot() + xlab("") +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",
fill="white", dotsize=0.8) +
ggplot(swiss, aes(y=Education, x="Education")) +
geom_boxplot() + xlab("") +
geom_dotplot(binaxis = "y", stackdir = "center", position = "dodge",
fill="white", dotsize=0.8) +
annotate("text", x=c(1.2,1.2,1.2,1.2,0.8),
y=swiss[out(swiss[,4]),4],
label= rownames(swiss[out(swiss[,4]),])) +
plot_layout(ncol=2)
library(MVA)
bvbox(swiss[,c(3,4)], xlab = colnames(swiss)[3], ylab = colnames(swiss)[4])
text(x = swiss[out(swiss[,4]),3], y = swiss[out(swiss[,4]),4]-2.5,
rownames(swiss[out(swiss[,4]),]))
maha <- mahalanobis(swiss[,3:4], # dados
center = colMeans(swiss[,3:4]), # médias das variáveis
cov = cov(swiss[,3:4])) # matriz de covariâncias
#calculando o cˆ2 para delimitar o limiar
quant <- qchisq(0.05, 2, lower.tail = F)
plot(1:length(maha), maha, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant, lty=2)
out <- maha[maha>quant]
text(c(42,46,47)-7, out, names(out))
ggplot(maha, aes(x=1:length(maha), y=maha)) + geom_point()
1:length(maha)
ggplot(maha, aes( y=maha)) + geom_point()
ggplot(maha, aes( y=maha)) + geom_dotplot()
ggplot(maha, aes( x=maha)) + geom_dotplot()
ggplot(maha, aes(maha)) + geom_dotplot()
maha
par(mfrow=c(1,2))
boxplot(swiss$Examination)
boxplot(swiss$Education)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(swiss$Examination)
boxplot(swiss$Education)
text(x=c(1.2,1.2,1.2,1.2,0.8),
y=swiss[out(swiss[,4]),4],
label= rownames(swiss[out(swiss[,4]),]))
# para determinar as observações outiers a serem nomeadas no plot
# OBS: é o critério usado na construção dos boxplots
out <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
swiss[out(swiss[,4]),4]
par(mfrow=c(1,2))
boxplot(swiss$Examination)
boxplot(swiss$Education)
text(x=rep(1,5),
y=swiss[out(swiss[,4]),4],
label= rownames(swiss[out(swiss[,4]),]))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(swiss$Examination)
boxplot(swiss$Education)
text(x=rep(1,5),
y=swiss[out(swiss[,4]),4]-1,
label= rownames(swiss[out(swiss[,4]),]))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(swiss$Examination)
boxplot(swiss$Education)
text(x=rep(1,1,1.5,0.5,1),
y=swiss[out(swiss[,4]),4]-2,
label= rownames(swiss[out(swiss[,4]),]))
par(mfrow=c(1,2))
boxplot(swiss$Examination)
boxplot(swiss$Education)
text(x=c(1,1,1.5,0.5,1),
y=swiss[out(swiss[,4]),4]-2,
label= rownames(swiss[out(swiss[,4]),]))
par(mfrow=c(1,1))
rownames(swiss[out(swiss[,4]),])
par(mfrow=c(1,2))
boxplot(swiss$Examination)
boxplot(swiss$Education)
text(x=c(1,1,1,0.5,1.5),
y=swiss[out(swiss[,4]),4]-c(3,-2,2,1,-1),
label= rownames(swiss[out(swiss[,4]),]))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(swiss$Examination)
boxplot(swiss$Education)
text(x=c(1,1,1,0.8,1.4),
y=swiss[out(swiss[,4]),4]-c(3,-2,2,1,-1),
label= rownames(swiss[out(swiss[,4]),]))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(swiss$Examination)
boxplot(swiss$Education)
text(x=c(1,1,1,0.8,1.2),
y=swiss[out(swiss[,4]),4]-c(3,-2,2,1,-1),
label= rownames(swiss[out(swiss[,4]),]))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(swiss$Examination, main = "Examination")
boxplot(swiss$Education, main = "Education")
text(x=c(1,1,1,0.8,1.2),
y=swiss[out(swiss[,4]),4]-c(3,-2,2,1,-1),
label= rownames(swiss[out(swiss[,4]),]))
par(mfrow=c(1,1))
#install_github("melina-leite/rmdformats")
library(knitr)
opts_chunk$set(
fig.align = "center", fig.show = "hold",
warning = F, message = F, error = F, cache = T
)
options(formatR.arrow = TRUE, width = 90)
maha <- mahalanobis(swiss[,3:4], # dados
center = colMeans(swiss[,3:4]), # médias das variáveis
cov = cov(swiss[,3:4])) # matriz de covariâncias
#calculando o cˆ2 para delimitar o limiar
quant <- qchisq(0.05, 2, lower.tail = F)
plot(1:length(maha), maha, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant, lty=2)
out <- maha[maha>quant]
text(c(42,46,47)-7, out, names(out))
maha2 <- mahalanobis(swiss, center = colMeans(swiss), cov = cov(swiss))
# para calcular o cˆ2, lembre-se que os graus de liberdade agora são 6
quant2 <- qchisq(0.95, 6)
plot(1:length(maha2), maha2, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant2, lty=2)
out2 <- maha2[maha2>quant2]
text(c(6,19,47)-4, out2, names(out2))
maha <- mahalanobis(swiss[,3:4], # dados
center = colMeans(swiss[,3:4]), # médias das variáveis
cov = cov(swiss[,3:4])) # matriz de covariâncias
#calculando o cˆ2 para delimitar o limiar
quant <- qchisq(0.10, 2, lower.tail = F)
plot(1:length(maha), maha, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant, lty=2)
out <- maha[maha>quant]
text(c(42,46,47)-7, out, names(out))
maha <- mahalanobis(swiss[,3:4], # dados
center = colMeans(swiss[,3:4]), # médias das variáveis
cov = cov(swiss[,3:4])) # matriz de covariâncias
#calculando o cˆ2 para delimitar o limiar
quant <- qchisq(0.05, 2, lower.tail = F)
plot(1:length(maha), maha, xlab = "Observações",
ylab= "Distância de Mahalanobis")
abline(h=quant, lty=2)
out <- maha[maha>quant]
text(c(42,46,47)-7, out, names(out))
library(MVN)
outliers <- mvOutlier(swiss,  method="quan")
# tente method="adj.quan"
